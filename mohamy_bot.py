import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# ุฅุนุฏุงุฏ ุงูุณุฌู ูุชุชุจุน ุงูุฃุฎุทุงุก
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ุฑุณุงูุฉ ุงูุชุฑุญูุจ ุนูุฏ ุฅุฑุณุงู /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("ูุฑุญุจูุง ุจู ูู ุจูุช ุงููุญุงูู ๐จโโ๏ธ\nุฃุฑุณู ุณุคุงูู ุงููุงูููู ูุณุฃููู ุจุงูุฅุฌุงุจุฉ ุนููู.")

# ุงูุชุนุงูู ูุน ุงูุฑุณุงุฆู ุงููุตูุฉ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text

    # ูู ุงูุฃูุถู ููุง ุชูุตูู ุงูุฑุณุงูุฉ ุฅูู ูููุฐุฌ ุฐูุงุก ุตูุงุนู ุฃู ูุงุนุฏุฉ ุจูุงูุงุชุ ููู ุณูุฑุฏ ุจุฑุฏ ุซุงุจุช ููุซุงู
    reply = (
        "ุดูุฑูุง ูุฑุณุงูุชู.\n"
        "ุณูุชู ุชุญููู ุณุคุงูู ุงููุงูููู ุฅูู ุงููุญุงูู ุงููุฎุชุต ูุงูุฑุฏ ุนููู ูู ุฃูุฑุจ ููุช ูููู.\n"
        "ูุฑุฌู ุงูุงูุชุธุงุฑ..."
    )

    # ุฅุฑุณุงู ุงูุฑุฏ ุฏูู ุงุณุชุฎุฏุงู parse_mode ูุชุฌูุจ ุงูุฎุทุฃ
    await update.message.reply_text(reply)

# ุฅูุดุงุก ุงูุชุทุจูู ูุชุดุบูู ุงูุจูุช
if __name__ == '__main__':
    import os
    TOKEN = os.getenv("BOT_TOKEN")  # ุชุฃูุฏ ุฃู ุงููุชุบูุฑ ูุฐุง ูุถุงู ุฅูู ุจูุฆุฉ Render

    if not TOKEN:
        raise ValueError("ูุฑุฌู ุถุจุท ูุชุบูุฑ ุงูุจูุฆุฉ BOT_TOKEN ูู Render")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("๐ ุฌุงุฑู ุชุดุบูู ุงูุจูุช...")
    app.run_polling()
