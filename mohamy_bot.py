import json
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

TOKEN = os.environ.get("BOT_TOKEN")

WELCOME_MESSAGE = (
    "ูุฑุญุจูุง ุจู ูู ูุญุงูู.ููู โ๏ธ\n"
    "ูุญู ููุง ููุณุงุนุฏุชู ูู ุงูุญุตูู ุนูู ุงุณุชุดุงุฑุงุช ูุงููููุฉ ููุซููุฉ ุชุณุงุนุฏู ุนูู ููู ุญูููู ูุงุชุฎุงุฐ ูุฑุงุฑุงุชู ุจุซูุฉ.\n\n"
    "โ ูุง ูุทูุจ ุฃู ูุนูููุงุช ุดุฎุตูุฉ\n"
    "๐๏ธ ูุชู ุญุฐู ุงููุญุงุฏุซุฉ ุชููุงุฆููุง ูู ุงูุณูุฑูุฑุงุช ููุฑ ุงูุชูุงุฆูุง โ ุฎุตูุตูุชู ุฃููููุชูุง\n\n"
    "๐ ุงุฎุชุฑ ุฃุญุฏ ุงูุฎูุงุฑุงุช ูู ุงููุงุฆูุฉ ุฃุฏูุงู ููุจุฏุก:"
)

ABOUT_MESSAGE = (
    "ุนู ูุญุงูู.ููู โ๏ธ\n\n"
    "\"ูุญุงูู.ููู\" ูู ุฃูู ููุตุฉ ุนุฑุงููุฉ ุฐููุฉ ูุชุฎุตุตุฉ ูู ุชูุฏูู ุงุณุชุดุงุฑุงุช ูุงููููุฉ ูุจุณูุทุฉ ูุขููุฉ ุชุณุงุนุฏู ุนูู ููู ุญูููู ูุงูุชุนุงูู ูุน ุงููุถุงูุง ุงููุงููููุฉ ุจุซูุฉ.\n\n"
    "ูุญู ูุคูู ุฃู ุงููุตูู ุฅูู ุงููุนุฑูุฉ ุงููุงููููุฉ ุญู ููุฌููุนุ ูุฐูู ูููุฑ ูู ูุนูููุงุช ุฏูููุฉ ููุจุณุทุฉ ุฏูู ุงูุญุงุฌุฉ ูููุดู ุนู ุฃู ุจูุงูุงุช ุดุฎุตูุฉ.\n\n"
    "๐ ุงูุฎุตูุตูุฉ ุฃููููุชูุง:\n"
    "ูุง ูุทูุจ ูุนูููุงุช ุดุฎุตูุฉุ ููุชู ุญุฐู ุงููุญุงุฏุซุฉ ุชููุงุฆููุง ุจุนุฏ ุงูุชูุงุฆูุง ูู ุฎูุงุฏููุง.\n\n"
    "๐ก ููุงุฐุง ูุญุงูู.ูููุ\n"
    "๐ฅ ุฃูู ููุตุฉ ูุงููููุฉ ุนุฑุงููุฉ ูุฏูุฑูุง ูุฎุจุฉ ูู ุงููุญุงููู ูุงูุญูููููู ุงูุนุฑุงูููู\n"
    "โ ุฅุฌุงุจุงุช ุณุฑูุนุฉ ููุงุถุญุฉ\n"
    "๐ ูุชุงุญุฉ ูู ุฃู ููุช\n"
    "๐ ุชุบุทู ูุฎุชูู ุงูุชุฎุตุตุงุช ุงููุงููููุฉ (ุงูุนููุฏุ ุงูุฃุณุฑุฉุ ุงูุนููุ ุงูุนูุงุฑุงุช...)\n\n"
    "ุงุจุฏุฃ ุงูุขูุ ูุงุทูุฆู ุจุฃู ุงุณุชูุณุงุฑู ุจูู ุฃูุฏู ุฃูููุฉ.\n\n"
    "ูุฃู ุฏุนู ุฃู ููุงุญุธุงุช: mohamycom@proton.me\n"
    "_(ุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ ูุฌุงููุฉ ุจุงููุงูู)_"
)

MAIN_MENU = [
    ["ุงุณุชุดุงุฑุงุช ูุงููููุฉ (ุชููุงุฆูุฉ)", "ุฎุฏูุงุชูุง ุงููุฏููุนุฉ"],
    ["ุชุนุฑู ุนูู ุญูููู (ูุฌุงูู)", "ุชุตูุญ ุงูููุงููู ุงูุนุฑุงููุฉ"],
    ["ุนู (ูุญุงูู.ููู)"]
]

BACK_TO_MENU = [[KeyboardButton("ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ")]]
PAID_REPLY_MARKUP = ReplyKeyboardMarkup([["ูุนูุ ุฃูุงูู"], ["ุฅูุบุงุก"], ["ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"]], resize_keyboard=True)
ONLY_BACK_MARKUP = ReplyKeyboardMarkup([["ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"]], resize_keyboard=True)

# ุฅุนุฏุงุฏ ูุชุบูุฑุงุช ุงูุฎุฏูุงุช ุงููุฏููุนุฉ
PAID_SERVICE, SERVICE_TYPE, WAITING_QUESTION = range(3)

# ุฎูุงุฑุงุช ุงูุฎุฏูุงุช ุงููุฏููุนุฉ (ุจุฏูู ุฐูุฑ ุงููุจูุบ)
SERVICE_OPTIONS = [
    [
        "ุชูุธูู ูุถุงูุง ููุธูู ุงูุฏููุฉ ูู ุงููุฒุงุฑุงุช ูุงูุฉ",
        "ุชูุธูู ูุถุงูุง ููุชุณุจู ุงูุฌูุด ุงูุนุฑุงูู"
    ],
    [
        "ุชูุธูู ุงูุนููุฏ ุงูุฎุงุตุฉ",
        "ุงุณุชูุณุงุฑุงุช ูุงููููุฉ ุฃุฎุฑู"
    ],
    ["ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"]
]

SERVICE_PRICES = {
    "ุชูุธูู ูุถุงูุง ููุธูู ุงูุฏููุฉ ูู ุงููุฒุงุฑุงุช ูุงูุฉ": 50000,
    "ุชูุธูู ูุถุงูุง ููุชุณุจู ุงูุฌูุด ุงูุนุฑุงูู": 50000,
    "ุชูุธูู ุงูุนููุฏ ุงูุฎุงุตุฉ": 100000,
    "ุงุณุชูุณุงุฑุงุช ูุงููููุฉ ุฃุฎุฑู": None
}

SERVICE_NAMES_DISPLAY = {
    "ุชูุธูู ูุถุงูุง ููุธูู ุงูุฏููุฉ ูู ุงููุฒุงุฑุงุช ูุงูุฉ": "ุชูุธูู ูุถุงูุง ููุธูู ุงูุฏููุฉ ูู ุงููุฒุงุฑุงุช ูุงูุฉ (50,000 ุฏ.ุน)",
    "ุชูุธูู ูุถุงูุง ููุชุณุจู ุงูุฌูุด ุงูุนุฑุงูู": "ุชูุธูู ูุถุงูุง ููุชุณุจู ุงูุฌูุด ุงูุนุฑุงูู (50,000 ุฏ.ุน)",
    "ุชูุธูู ุงูุนููุฏ ุงูุฎุงุตุฉ": "ุชูุธูู ุงูุนููุฏ ุงูุฎุงุตุฉ (100,000 ุฏ.ุน)",
    "ุงุณุชูุณุงุฑุงุช ูุงููููุฉ ุฃุฎุฑู": "ุงุณุชูุณุงุฑุงุช ูุงููููุฉ ุฃุฎุฑู (ุงูุณุนุฑ ููุญุฏุฏ ุจุนุฏ ูุฑุงุฌุนุฉ ุงููุญุงูู)"
}

LAWYER_USER_ID = 8109994800
LAWYER_USERNAME = "mohamycom"
LAWYER_EMAIL = "mohamycom@proton.me"
LAWYER_WHATSAPP = "07775535047"

QUESTIONS_FILE = "user_questions.json"
user_questions = {}

def save_questions():
    with open(QUESTIONS_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_questions, f, ensure_ascii=False)

def load_questions():
    global user_questions
    try:
        with open(QUESTIONS_FILE, 'r', encoding='utf-8') as f:
            user_questions = json.load(f)
            user_questions = {int(k): v for k, v in user_questions.items()}
    except Exception:
        user_questions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ":
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)
    elif text == "ุนู (ูุญุงูู.ููู)":
        reply_markup = ReplyKeyboardMarkup(BACK_TO_MENU, resize_keyboard=True)
        await update.message.reply_text(ABOUT_MESSAGE, reply_markup=reply_markup)
    elif text == "ุฎุฏูุงุชูุง ุงููุฏููุนุฉ":
        reply_markup = ReplyKeyboardMarkup(SERVICE_OPTIONS, resize_keyboard=True)
        await update.message.reply_text(
            "๐ข ุงูุฎุฏูุฉ ุงููุฏููุนุฉ - ุงุณุชุดุงุฑุฉ ุฎุงุตุฉ\n\n"
            "- ูุฐู ุงูุฎุฏูุฉ ูุฎุตุตุฉ ููุงุณุชุดุงุฑุงุช ุงููุงููููุฉ ุงูุญุณุงุณุฉ ุงูุชู ุชุญุชุงุฌ ุฅูู ุฅุฌุงุจุฉ ูู ูุฎุชุตูู ุฐูู ุฎุจุฑุฉ.\n\n"
            "ุงุฎุชุฑ ูู ุงููุงุฆูุฉ ุฃุฏูุงู ููุน ุงูุฎุฏูุฉ ุจุงูุชุญุฏูุฏ:",
            reply_markup=reply_markup
        )
        return SERVICE_TYPE
    elif text in sum(MAIN_MENU, []):  # ุจุงูู ุงูุฃุฒุฑุงุฑ
        reply_markup = ReplyKeyboardMarkup(BACK_TO_MENU, resize_keyboard=True)
        await update.message.reply_text("ุณูุชู ุชูุนูู ุงูุฎุฏูุฉ ูุฑูุจุง", reply_markup=reply_markup)

async def service_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in SERVICE_PRICES:
        context.user_data["selected_service_type"] = text
        service_price = SERVICE_PRICES.get(text)
        service_display = SERVICE_NAMES_DISPLAY.get(text, text)
        if service_price is not None:
            price_msg = f"- ุชูููุฉ ุงูุงุณุชุดุงุฑุฉ: {service_price:,} ุฏููุงุฑ ุนุฑุงูู."
        else:
            price_msg = "- ุชูููุฉ ุงูุงุณุชุดุงุฑุฉ: ุณูุชู ุชุญุฏูุฏูุง ุจุนุฏ ูุฑุงุฌุนุฉ ุงููุญุงูู."
        await update.message.reply_text(
            f"๐ข ุงูุฎุฏูุฉ ุงููุฏููุนุฉ - {service_display}\n\n"
            "- ูุฐู ุงูุฎุฏูุฉ ูุฎุตุตุฉ ููุงุณุชุดุงุฑุงุช ุงููุงููููุฉ ุงูุญุณุงุณุฉ ุงูุชู ุชุญุชุงุฌ ุฅูู ุฅุฌุงุจุฉ ูู ูุฎุชุตูู ุฐูู ุฎุจุฑุฉ.\n"
            f"{price_msg}\n"
            "ูู ุชูุงูู ุนูู ุงูุดุฑูุท ูุชุฑูุฏ ูุชุงุจุนุฉ ุทูุจ ุงูุงุณุชุดุงุฑุฉุ",
            reply_markup=PAID_REPLY_MARKUP
        )
        return PAID_SERVICE
    elif text == "ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ":
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)
        return ConversationHandler.END
    else:
        await update.message.reply_text("ูุฑุฌู ุงุฎุชูุงุฑ ููุน ุฎุฏูุฉ ูู ุงููุงุฆูุฉ.", reply_markup=PAID_REPLY_MARKUP)

async def paid_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "ูุนูุ ุฃูุงูู":
        await update.message.reply_text(
            "ูุฑุฌู ูุชุงุจุฉ ุงุณุชูุณุงุฑู ุจุดูู ููุตู ููุชู ุชุญูููู ูููุญุงูู ุงููุฎุชุต.",
            reply_markup=ONLY_BACK_MARKUP
        )
        return WAITING_QUESTION
    elif text == "ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ":
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)
        return ConversationHandler.END
    else:
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text("ุชู ุฅูุบุงุก ุงูุทูุจ.", reply_markup=reply_markup)
        return ConversationHandler.END

async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    question = update.message.text
    chat_id = update.message.chat_id
    service_type = context.user_data.get("selected_service_type", "ุบูุฑ ูุญุฏุฏ")
    service_price = SERVICE_PRICES.get(service_type)
    service_display = SERVICE_NAMES_DISPLAY.get(service_type, service_type)

    load_questions()
    question_id = max(user_questions.keys(), default=0) + 1
    user_questions[question_id] = {
        "user_id": chat_id,
        "question": question,
        "service_type": service_type,
        "service_price": service_price
    }
    save_questions()

    msg = (
        f"ุงุณุชูุณุงุฑ ูุฏููุน ุฌุฏูุฏ\n"
        f"ุฑูู ุงูุงุณุชูุณุงุฑ: {question_id}\n"
        f"ููุน ุงูุฎุฏูุฉ: {service_display}\n"
        f"ูู: {user.full_name} (@{user.username or 'ุจุฏูู ููุฒุฑููู'})\n"
        f"ูุต ุงูุงุณุชูุณุงุฑ:\n{question}\n\n"
        f"ููุฑุฏ ุจุงูููุงููุฉ ุฃุฑุณู:\n/accept{question_id}"
    )
    await update.message.reply_text(
        "ุชู ุฅุฑุณุงู ุงุณุชูุณุงุฑู ูููุญุงูู ุงููุฎุชุต.\n"
        "ุณูุชู ุฅุนูุงูู ุนูุฏ ุงูููุงููุฉ ุนูู ุทูุจู.",
        reply_markup=ONLY_BACK_MARKUP
    )
    await context.bot.send_message(chat_id=LAWYER_USER_ID, text=msg)
    return ConversationHandler.END

async def accept_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if not text.startswith("/accept"):
        return
    try:
        question_id = int(text.replace("/accept", ""))
    except Exception:
        await update.message.reply_text("ุตูุบุฉ ุฑูู ุงูุงุณุชูุณุงุฑ ุบูุฑ ุตุญูุญุฉ.")
        return

    load_questions()
    if question_id in user_questions:
        q = user_questions[question_id]
        user_id = q["user_id"]
        service_type = q["service_type"]
        service_price = q["service_price"]
        service_display = SERVICE_NAMES_DISPLAY.get(service_type, service_type)

        reply_markup = ONLY_BACK_MARKUP

        if service_price is not None:
            accept_message = (
                "โ ุชูุช ุงูููุงููุฉ ุนูู ุงุณุชูุณุงุฑู ูู ูุจู ุงููุญุงูู.\n\n"
                f"ููุน ุงูุฎุฏูุฉ: {service_display}\n"
                f"ุชูููุฉ ุงูุฎุฏูุฉ: {service_price:,} ุฏููุงุฑ ุนุฑุงูู\n\n"
                "ููููู ุงูุขู ุฅููุงู ุฅุฌุฑุงุกุงุช ุงูุฏูุน ูุงูุชูุงุตู ุนุจุฑ ุฃุญุฏ ุงูุทุฑู ุงูุชุงููุฉ:\n\n"
                f"1๏ธโฃ ุชูููุฌุฑุงู: @{LAWYER_USERNAME}\n"
                f"2๏ธโฃ ุงูุฅูููู: {LAWYER_EMAIL}\n"
                f"3๏ธโฃ ูุงุชุณุงุจ: {LAWYER_WHATSAPP}\n\n"
                "ูุฑุฌู ุฅุฑุณุงู ุตูุฑุฉ ุงูุชุญููู ุฃู ุฑูู ุงูุนูููุฉ ุนุจุฑ ุงููุณููุฉ ุงูุชู ุชูุถููุงุ ูุณูุชู ุงูุฑุฏ ุนููู ุจุนุฏ ุงูุชุฃูุฏ.\n\n"
                "ูุฑุฌู ุนุฏู ุงูุชูุงุตู ูุน ุงูุทุฑู ุงุนูุงู ุงูุง ุนูุฏูุง ูุชู ุชุญููู ุงููุจูุบ ุงููุญุฏุฏ ูุณูุชู ุงููุงู ุงู ุฑุณุงูุฉ ูุจู ุฐูู\n"
                "ุดูุฑุง ูุชููููู"
            )
        else:
            accept_message = (
                "โ ุชูุช ุงูููุงููุฉ ุนูู ุงุณุชูุณุงุฑู ูู ูุจู ุงููุญุงูู.\n\n"
                f"ููุน ุงูุฎุฏูุฉ: {service_display}\n"
                "ุชูููุฉ ุงูุฎุฏูุฉ: ุณูุชู ุฅุนูุงูู ุจุงูุณุนุฑ ุจุนุฏ ูุฑุงุฌุนุฉ ุงููุญุงูู.\n\n"
                "ููููู ุงูุขู ุฅููุงู ุฅุฌุฑุงุกุงุช ุงูุฏูุน ูุงูุชูุงุตู ุนุจุฑ ุฃุญุฏ ุงูุทุฑู ุงูุชุงููุฉ:\n\n"
                f"1๏ธโฃ ุชูููุฌุฑุงู: @{LAWYER_USERNAME}\n"
                f"2๏ธโฃ ุงูุฅูููู: {LAWYER_EMAIL}\n"
                f"3๏ธโฃ ูุงุชุณุงุจ: {LAWYER_WHATSAPP}\n\n"
                "ูุฑุฌู ุฅุฑุณุงู ุตูุฑุฉ ุงูุชุญููู ุฃู ุฑูู ุงูุนูููุฉ ุนุจุฑ ุงููุณููุฉ ุงูุชู ุชูุถููุงุ ูุณูุชู ุงูุฑุฏ ุนููู ุจุนุฏ ุงูุชุฃูุฏ.\n\n"
                "ูุฑุฌู ุนุฏู ุงูุชูุงุตู ูุน ุงูุทุฑู ุงุนูุงู ุงูุง ุนูุฏูุง ูุชู ุชุญููู ุงููุจูุบ ุงููุญุฏุฏ ูุณูุชู ุงููุงู ุงู ุฑุณุงูุฉ ูุจู ุฐูู\n"
                "ุดูุฑุง ูุชููููู"
            )
        try:
            await context.bot.send_message(chat_id=user_id, text=accept_message, reply_markup=reply_markup)
        except Exception as e:
            await update.message.reply_text(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุญุงููุฉ ุฅุฑุณุงู ุฑุณุงูุฉ ุงููุจูู ูููุณุชุฎุฏู: {e}")
            return
        await update.message.reply_text("ุชู ุฅุนูุงู ุงููุณุชุฎุฏู ุจุงูููุงููุฉ.")
        del user_questions[question_id]
        save_questions()
    else:
        await update.message.reply_text("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุฐุง ุงูุงุณุชูุณุงุฑ.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"ุญุฏุซ ุฎุทุฃ: {context.error}")

def main():
    load_questions()
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
        states={
            SERVICE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, service_type_handler)],
            PAID_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, paid_service_handler)],
            WAITING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler)],
        },
        fallbacks=[MessageHandler(filters.Regex("^ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ$"), menu_handler)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex(r"^/accept\d+$"), accept_handler))
    app.add_error_handler(error_handler)

    app.run_polling()

if __name__ == '__main__':
    main()